<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
	default-autowire="byName">
	  
	<!--扫描@Required,@Autowired等注解,自动装配bean-->
	<context:annotation-config/>
	
	<!--自动扫描的基包,包含子包-->
	<context:component-scan base-package="com.skmbw"/>
	
	<!--读取jndi数据库连接配置属性文件-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations"> 
			<list> 
				<value>classpath:jndi.properties</value>
			</list> 
		</property> 
	</bean>
	
	<!-- 
	<bean id="skmbwDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.skmbwurl}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	<bean id="biziliDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.biziliurl}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean> -->
	
	<bean id="jotm" class="com.skmbw.transaction.internal.JotmFactoryBean" />
	<!-- 
	<bean id="jotm" class="org.objectweb.jotm.UserTransactionFactory"></bean> -->
	
	<!-- jotm local inatance 
	<bean id="jotm" class="org.springframework.transaction.jta.JotmFactoryBean"/>-->
	
	<bean id="skmbwDataSource" class="org.enhydra.jdbc.pool.StandardXAPoolDataSource" destroy-method="shutdown">              
	    <property name="dataSource">
	      <bean class="org.enhydra.jdbc.standard.StandardXADataSource" destroy-method="shutdown">                    
	          <property name="transactionManager" ref="jotm"/>                    
	          <property name="driverName" value="${jdbc.driverClassName}"/>      
	          <property name="url" value="${jdbc.skmbwurl}"/>         
	          <property name="user" value="${jdbc.username}"/>       
	          <property name="password" value="${jdbc.password}"/>                
	    </bean>           
	  	</property>            
	   	<property name="user" value="${jdbc.username}"/>            
	   	<property name="password" value="${jdbc.password}"/>        
	</bean>        

	<bean id="biziliDataSource" class="org.enhydra.jdbc.pool.StandardXAPoolDataSource" destroy-method="shutdown">           
        <property name="dataSource">       
	       <bean class="org.enhydra.jdbc.standard.StandardXADataSource" destroy-method="shutdown">              
	          <property name="transactionManager" ref="jotm"/>            
	         <property name="driverName" value="${jdbc.driverClassName}"/>         
	         <property name="url" value="${jdbc.biziliurl}"/>         
	         <property name="user" value="${jdbc.username}"/>          
	         <property name="password" value="${jdbc.password}"/>                
	       </bean>       
	    </property>            
	   <property name="user" value="${jdbc.username}"/>            
	   <property name="password" value="${jdbc.password}"/>        
	</bean>
	<!-- 
	<bean id="skmbwDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="${jdbc.skmbwDataSource}" />
	</bean>
	
	<bean id="biziliDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="${jdbc.biziliDataSource}" />
	</bean>
	 -->
	<!--基于annotation配置Hibernate sessionFactory-->
	<bean id="skmbwSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="skmbwDataSource" />
		<property name="packagesToScan">
    		<list>
     			<value>com.skmbw.common.model</value>
     			<value>com.skmbw.user.model</value>
     			<value>com.skmbw.travel.model</value>
     			<value>com.skmbw.finance.report.model</value>
     			<value>com.skmbw.finance.setting.model</value>
     			<value>com.skmbw.finance.account.model</value>
     			<value>com.skmbw.finance.assets.model</value>
     			<value>com.skmbw.finance.currency.model</value>
    		</list>
   		</property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.jdbc.batch_size">25</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.default_batch_fetch_size">60</prop>
				<prop key="hibernate.jdbc.use_reflection_optimizer">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!-- 是否根据需要每次自动创建数据库create 
				<prop key="hibernate.hbm2ddl.auto">update</prop>-->
				<!--<prop key="hibernate.max_fetch_depth">2</prop>-->
				<prop key="javax.persistence.validation.mode">none</prop>
				 
				<prop key="hibernate.current_session_context_class">jta</prop><!-- the and the below three configration is the XaTransaction configration -->
				<prop key="hibernate.transaction.factory_class">org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory</prop>
				<!-- <prop key="hibernate.transaction.manager_lookup_class">org.hibernate.transaction.JBossTransactionManagerLookup</prop> is old-->
				<prop key="hibernate.transaction.jta.platform">org.hibernate.service.jta.platform.internal.JOTMJtaPlatform</prop>
			</props>
		</property>
	</bean>
	
	<!--基于annotation配置Hibernate sessionFactory-->
	<bean id="biziliSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="biziliDataSource" />
		<property name="packagesToScan">
    		<list>
     			<value>com.skmbw.travel.model</value>
     			<value>com.skmbw.finance.assets.model</value>
     			<value>com.skmbw.finance.currency.model</value>
     			<value>com.skmbw.finance.account.model</value>
    		</list>
   		</property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.jdbc.batch_size">25</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.default_batch_fetch_size">60</prop>
				<prop key="hibernate.jdbc.use_reflection_optimizer">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!-- 是否根据需要每次自动创建数据库create 
				<prop key="hibernate.hbm2ddl.auto">update</prop>-->
				<!--<prop key="hibernate.max_fetch_depth">2</prop>-->
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.current_session_context_class">jta</prop><!-- the and the below three configration is the XaTransaction configration -->
				<prop key="hibernate.transaction.factory_class">org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory</prop>
				<!-- <prop key="hibernate.transaction.manager_lookup_class">org.hibernate.transaction.JBossTransactionManagerLookup</prop> is old-->
				<prop key="hibernate.transaction.jta.platform">org.hibernate.service.jta.platform.internal.JOTMJtaPlatform</prop>
			</props>
		</property>
	</bean>
	<!-- 
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean> -->
	<!--定义多个sessionFactory，分布式事务
	<bean id="sessionFactoryXA">
	</bean>-->
	<!--单个Hibernate SessionFactory的Transaction manager
	<bean id="transactionManagerXa" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="skmbwSessionFactory" />
	</bean>-->
    
    <!--这个id的值不能是transactionManager-->
    <bean id="transactionManagerXa" class="org.springframework.transaction.jta.JtaTransactionManager">
    	<property name="userTransaction" ref="jotm"/>
    </bean>
    
    <!--Get the javax.transaction.TransactionManager for hibernate   
    <bean id="transactionManager" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">   
            <value>java:/TransactionManager</value>   
        </property>   
    </bean>-->
    <!--使用这种方式设置JTA是OK的
    <tx:jta-transaction-manager >
    	<alias name="transactionManagerXa" alias="transactionManagerXa"/>
    </tx:jta-transaction-manager>-->
	<!--使用annotation定义事务 
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />-->
	
	<!-- 开启AOP监听 只对当前配置文件有效
	<aop:aspectj-autoproxy expose-proxy="true"/> -->
	
	<!-- 开启注解事务 只对当前配置文件有效
  	<tx:annotation-driven transaction-manager="transactionManagerXa"/> -->
	
	<!-- 
    <bean id="transactionManagerXa" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean> -->
	
	<!--切面事务-->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManagerXa"> 
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true"/> 
			<tx:method name="unique*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="persist*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="create*" propagation="REQUIRED"/>
			<tx:method name="execute*" propagation="REQUIRED"/>
			<tx:method name="*" read-only="true" propagation="REQUIRED" isolation="DEFAULT" timeout="3000" rollback-for="java.lang.Exception"/>
		</tx:attributes> 
	</tx:advice>
	
	<aop:config expose-proxy="true"><!--为com.skmbw.*.*.impl包下所有类的所有方法应用事务切点-->
		<aop:pointcut expression="execution(* com.skmbw.*.service.impl.*.*(..))" id="txMethodPointCut"/>		
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="txMethodPointCut"/>
	</aop:config>

	<!--以下为ajax DWR配置，使用annotation-->
	<dwr:configuration/>
	<!--扫描读取注解加载的类-->
	<dwr:annotation-scan scanRemoteProxy="true" base-package="com.skmbw"/>
	<!--把util.js,engine.js映射为dwrController-->
	<dwr:url-mapping/>
	<!--部署时把debug设为false-->
	<dwr:controller id="dwrController" debug="true"/>
	  
</beans>