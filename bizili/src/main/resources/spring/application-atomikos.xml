<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
	default-autowire="byName">
	
	<import resource="application-oxm-jibx.xml"/>
	<import resource="application-cache-memcache.xml"/>
	<import resource="application-mybatis.xml"/>
	<import resource="application-scheduler.xml"/>
	<import resource="application-security.xml"/>
	 
	<!-- auto wire bean -->
	<context:annotation-config/>
	<!-- spring cache -->
	<cache:annotation-driven cache-manager="memcacheBasedCacheManager"/>
	<!-- auto scan bean base package , 可以有多个值，以逗号分开-->
	<context:component-scan base-package="com.skmbw"/>
	
	<bean id="propertyConfig" class="com.vteba.config.spring.EncryptPropHolderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jndi.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
        <property name="forceShutdown" value="true"/>
    </bean>
    
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="30000"/>
    </bean>
    <!-- 
	<bean id="jbossTransactionManager" class="com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionManagerImple"/>
    
	<bean id="jbossUserTransaction" class="com.arjuna.ats.internal.jta.transaction.arjunacore.UserTransactionImple"/>
    
    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
	    <property name="transactionManager" ref="jbossTransactionManager"/>
	    <property name="userTransaction" ref="jbossUserTransaction"/>
    </bean> -->
	<bean id="skmbwDataSource" class="com.vteba.jdbc.xa.atomikos.datasource.AtomikosDataSourceBean" init-method="init" destroy-method="close" depends-on="atomikosUserTransaction">
        <property name="uniqueResourceName">
            <value>mysqlSkmbw</value>
        </property>
        <property name="xaDataSourceClassName">
            <value>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</value>
        </property>
        <property name="xaProperties">
        	<props>
        		<prop key="ServerName">${jdbc.skmbwServerName}</prop>
        		<prop key="Port">${jdbc.skmbwServerPort}</prop>
        		<prop key="DatabaseName">${jdbc.skmbwDatabaseName}</prop>
        		<prop key="User">${jdbc.username}</prop>
        		<prop key="Password">${jdbc.password}</prop>
        		<prop key="pinGlobalTxToPhysicalConnection">true</prop>
        	</props>
        </property>
        <property name="maxPoolSize">
            <value>100</value>
        </property>
        <property name="minPoolSize">
            <value>10</value>
        </property>
        <property name="testQuery">
            <value>SELECT 1</value>
        </property>
    </bean>
        
    <bean id="biziliDataSource" class="com.vteba.jdbc.xa.atomikos.datasource.AtomikosDataSourceBean" init-method="init" destroy-method="close">
        <property name="uniqueResourceName">
            <value>mysqlBizili</value>
        </property>
        <property name="xaDataSourceClassName">
            <value>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</value>
        </property>
        <property name="xaProperties">
        	<props>
        		<prop key="ServerName">${jdbc.biziliServerName}</prop>
        		<prop key="Port">${jdbc.biziliServerPort}</prop>
        		<prop key="DatabaseName">${jdbc.biziliDatabaseName}</prop>
        		<prop key="User">${jdbc.username}</prop>
        		<prop key="Password">${jdbc.password}</prop>
        		<prop key="pinGlobalTxToPhysicalConnection">true</prop><!-- MySQL does not support TMJOIN -->
        	</props>
        </property>
        <property name="maxPoolSize">
            <value>100</value>
        </property>
        <property name="minPoolSize">
            <value>10</value>
        </property>
        <property name="testQuery">
            <value>SELECT 1</value>
        </property>
    </bean>
    
    <bean id="supplychainDataSource" class="com.vteba.jdbc.xa.atomikos.datasource.AtomikosDataSourceBean" init-method="init" destroy-method="close">
        <property name="uniqueResourceName">
            <value>mysqlSupplychain</value>
        </property>
        <property name="xaDataSourceClassName">
            <value>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</value>
        </property>
        <property name="xaProperties">
        	<props>
        		<prop key="ServerName">${jdbc.supplychainServerName}</prop>
        		<prop key="Port">${jdbc.supplychainServerPort}</prop>
        		<prop key="DatabaseName">${jdbc.supplychainDatabaseName}</prop>
        		<prop key="User">${jdbc.username}</prop>
        		<prop key="Password">${jdbc.password}</prop>
        		<prop key="pinGlobalTxToPhysicalConnection">true</prop><!-- MySQL does not support TMJOIN -->
        	</props>
        </property>
        <property name="maxPoolSize">
            <value>100</value>
        </property>
        <property name="minPoolSize">
            <value>10</value>
        </property>
        <property name="testQuery">
            <value>SELECT 1</value>
        </property>
    </bean>
    
    <bean id="applicationContextHolder" class="com.vteba.service.context.spring.ApplicationContextHolder"/>
    
    <!--based annotation config Hibernate sessionFactory-->
	<bean id="biziliSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" depends-on="applicationContextHolder">
		<property name="dataSource" ref="biziliDataSource" />
		<property name="packagesToScan">
    		<list>
     			<value>com.vteba.finance.assets.model</value>
     			<value>com.vteba.finance.currency.model</value>
     			<value>com.vteba.finance.account.model</value>
     			<value>com.vteba.finance.setting.model</value>
     			<value>com.vteba.finance.report.model</value>
     			<value>com.vteba.finance.table.model</value>
     			<value>com.vteba.finance.receivables.model</value>
     			<value>com.vteba.finance.payables.model</value>
    		</list>
   		</property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.jdbc.fetch_size">10</prop>
				<prop key="hibernate.default_batch_fetch_size">50</prop>
				<prop key="hibernate.jdbc.use_reflection_optimizer">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				
				<!-- the below three configration is the XaTransaction configration org.springframework.orm.hibernate4.SpringSessionContext-->
				<prop key="hibernate.current_session_context_class">jta</prop>
				<prop key="hibernate.transaction.factory_class">org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory</prop>
				<prop key="hibernate.transaction.jta.platform">com.vteba.jdbc.jta.platform.AtomikosJtaPlatform</prop>
				
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <!-- 
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="net.sf.ehcache.configurationResourceName">${ehcache.configFileName.bizili}</prop> -->
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
                <!-- memcached -->
                <prop key="hibernate.cache.region.factory_class">com.vteba.cache.hibernate.memcached.MemcachedCacheRegionFactory</prop>
                <prop key="hibernate.memcached.memcacheClientFactory">com.vteba.cache.hibernate.memcached.xmemcached.XmemcachedClientFactory</prop>
                <!-- <prop key="hibernate.memcached.memcacheClientFactory">net.rubyeye.xmemcached.utils.hibernate.XmemcachedClientFactory</prop> -->
                
                
                <!-- hibernate multiTenancy -->
                <prop key="hibernate.multiTenancy">SCHEMA</prop>
                <prop key="hibernate.multi_tenant_connection_provider">com.vteba.service.connection.MultiTenantConnectionProviderImpl</prop>
                <prop key="hibernate.connection.datasource">biziliDataSource</prop>
				<prop key="hibernate.tenant_identifier_resolver">com.vteba.service.context.multitenant.CurrentTenantIdentifierResolverImpl</prop>
			</props>
		</property>
	</bean>
    
	<!--based annotation config Hibernate sessionFactory-->
	<bean id="skmbwSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="skmbwDataSource" />
		<property name="packagesToScan">
    		<list>
     			<value>com.vteba.common.model</value>
     			<value>com.vteba.user.model</value>
     			<value>com.vteba.oa.attendance.model</value>
     			<value>com.vteba.oa.cost.model</value>
     			<value>com.vteba.hr.wage.model</value>
     			<value>com.vteba.hr.organization.model</value>
    		</list>
   		</property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.jdbc.fetch_size">10</prop>
				<prop key="hibernate.default_batch_fetch_size">50</prop>
				<prop key="hibernate.jdbc.use_reflection_optimizer">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				
				<!-- the below three configration is the XaTransaction configration -->
				<prop key="hibernate.current_session_context_class">jta</prop>
				<prop key="hibernate.transaction.factory_class">org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory</prop>
				<prop key="hibernate.transaction.jta.platform">com.vteba.jdbc.jta.platform.AtomikosJtaPlatform</prop>
				
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="net.sf.ehcache.configurationResourceName">${ehcache.configFileName.skmbw}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
			</props>
		</property>
	</bean>
	
	<!--based annotation config Hibernate sessionFactory-->
	<bean id="supplychainSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="supplychainDataSource" />
		<property name="packagesToScan">
    		<list>
     			<value>com.vteba.supplychain.inventory.model</value>
     			<value>com.vteba.supplychain.purchase.model</value>
     			<value>com.vteba.supplychain.sell.model</value>
     			<value>com.vteba.supplychain.accounting.model</value>
     			<value>com.vteba.supplychain.common.model</value>
    		</list>
   		</property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.jdbc.fetch_size">10</prop>
				<prop key="hibernate.default_batch_fetch_size">50</prop>
				<prop key="hibernate.jdbc.use_reflection_optimizer">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				
				<!-- the below three configration is the XaTransaction configration -->
				<prop key="hibernate.current_session_context_class">jta</prop>
				<prop key="hibernate.transaction.factory_class">org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory</prop>
				<prop key="hibernate.transaction.jta.platform">com.vteba.jdbc.jta.platform.AtomikosJtaPlatform</prop>
				
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="net.sf.ehcache.configurationResourceName">${ehcache.configFileName.supplychain}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
			</props>
		</property>
	</bean>
	
	<!-- jdbcTemplate -->
	<bean id="biziliJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="biziliDataSource"/>
	</bean>
	<bean id="skmbwJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="skmbwDataSource"/>
	</bean>
	<bean id="supplychainJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="supplychainDataSource"/>
	</bean>
	
    <!-- this id's value can't be transactionManager-->
    <bean id="transactionManagerXa" class="org.springframework.transaction.jta.JtaTransactionManager">
    	<property name="transactionManager" ref="atomikosTransactionManager"/>
    	<property name="userTransaction" ref="atomikosUserTransaction"/>
    </bean>
    
	<!-- aop transaction advice -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManagerXa"> 
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true"/> 
			<tx:method name="unique*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="persist*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="create*" propagation="REQUIRED"/>
			<tx:method name="execute*" propagation="REQUIRED"/>
			<tx:method name="auto*" propagation="REQUIRED"/>
			<tx:method name="batch*" propagation="REQUIRED"/>
			<tx:method name="check*" propagation="REQUIRED"/>
			<tx:method name="calculate*" propagation="REQUIRED"/>
			<tx:method name="handle*" propagation="REQUIRED"/>
			<tx:method name="decide*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" timeout="6000" rollback-for="java.lang.RuntimeException"/>
		</tx:attributes> 
	</tx:advice>
	
	<aop:config expose-proxy="true"><!--为com.vteba.*.*.impl包下所有类的所有方法应用事务切点-->
		<aop:pointcut expression="execution(* com.vteba.*.service.impl.*.*(..))" id="serviceTxMethodPointCut"/>
		<aop:pointcut expression="execution(* com.vteba.*.*.service.impl.*.*(..))" id="financeTxMethodPointCut"/>
		<aop:pointcut expression="execution(* com.vteba.*.*.remote.*.*(..))" id="remoteTxMethodPointCut"/>		
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceTxMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="financeTxMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="remoteTxMethodPointCut"/>
	</aop:config>
	
	<!-- 以下是perf4j的性能监控，正式环境去掉 -->
	<aop:aspectj-autoproxy />
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
	    <property name="beanNames">
	        <list>
	            <value>*ServiceImpl</value>
	        </list>
	    </property>
	    <property name="interceptorNames">
	        <list>
	            <value>perf4jInterceptor</value>
	        </list>
	    </property>
	</bean>
	
	<bean id="schemaInterceptor" class="com.vteba.interceptor.schema.DetermineSchemaInterceptor"/>
	<!--schema拦截器定义 -->
	<aop:config expose-proxy="true"><!-- proxy-target-class="true" -->
		<aop:pointcut expression="execution(* com.vteba.*.*.impl.*.*(..)) or execution(* com.vteba.*.*.dao.impl.*.*(..)) or execution(* com.vteba.*.dao.impl.*.*(..))" id="schemaPointcut"/>
		<aop:advisor advice-ref="schemaInterceptor" pointcut-ref="schemaPointcut" />
	</aop:config>
	
	<bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	  <property name="templateLoaderPath" value="classpath:mailTemplate"/><!--指定模板文件目录--> 
	  <property name="freemarkerSettings"><!-- 设置FreeMarker环境属性--> 
	      <props>
	          <prop key="template_update_delay">18000</prop><!--刷新模板的周期，单位为秒--> 
	          <prop key="default_encoding">UTF-8</prop><!--模板的编码格式 -->
	          <prop key="locale">zh_CN</prop><!-- 本地化设置-->
	      </props>
	  </property>
	</bean>
	
	<!--
	<bean id="templateEmail" class="com.bb.spring.email.TemplateEmailService">
	    <property name="sender" ref="mailsender"></property>
	    <property name="freeMarkerConfigurer" ref="freeMarker"></property>
	</bean>-->
	
	<!--以下为ajax DWR配置，使用annotation-->
	<dwr:configuration/>
	<!--扫描读取注解加载的类-->
	<dwr:annotation-scan scanRemoteProxy="true" base-package="com.skmbw"/>
	<!--把util.js,engine.js映射为dwrController-->
	<dwr:url-mapping/>
	<!--部署时把debug设为false-->
	<dwr:controller id="dwrController" debug="true"/>
	  
</beans>