package com.vteba.finance.table.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import com.vteba.finance.account.model.Subject;
import com.vteba.finance.table.dao.IDailyAccountDao;
import com.vteba.finance.table.model.AccountBalance;
import com.vteba.finance.table.model.DailyAccount;
import com.vteba.finance.table.service.IAccountBalanceService;
import com.vteba.finance.table.service.IDailyAccountService;
import com.vteba.service.generic.impl.BaseServiceImpl;
import com.vteba.tx.hibernate.BaseGenericDao;
import com.vteba.utils.common.BigDecimalUtils;
import com.vteba.utils.date.DateUtils;
import com.vteba.utils.ofbiz.LangUtils;

/**
 * 日记账service实现
 * @author yinlei 
 * date 2012-7-6 下午11:09:12
 */
@Named
public class DailyAccountServiceImpl extends BaseServiceImpl<DailyAccount, String>
		implements IDailyAccountService {
	
	private IDailyAccountDao dailyAccountDaoImpl;
	private IAccountBalanceService accountBalanceServiceImpl;
	
	public DailyAccountServiceImpl() {
		super();
	}
	
	//1、某一天没有发生就不用显示
	//2、要统计就要统计一个月的数据
	//3、摘要，科目，借方，贷方都是对方的
	//4、当一个对应多个对方科目时，银行或者现金科目要重复以适应对方科目
	public void autoGenerateDailyAccountTask() {
		String period = DateUtils.toDateString("yyyy-MM");
		//String oneHql = "select s from Subject s where s.subjectCode = :cashCode or s.subjectCode = :bankCode ";
		//Map<String, Object> param = new HashMap<String, Object>();
		//param.put("cashCode", "1001");
		//param.put("bankCode", "1002");
		//List<Subject> subList = subjectServiceImpl.queryListByHql(oneHql, param);
		
		List<String> codeList = new ArrayList<String>();
		codeList.add("1001");
		codeList.add("100201");
		codeList.add("100202");
		//删除原有的数据
		//String delHql = " delete from DailyAccount d where d.accountPeriod = ?1 ";
		dailyAccountDaoImpl.deleteBatch(LangUtils.toMap("accountPeriod", period));
		
		for (String code : codeList) {
			//--------------上日余额--------------//
			//DailyAccount lastDayBalance = new DailyAccount();
			//lastDayBalance.setSummary("上日余额");
			//lastDayBalance.setAccountPeriod(period);
			//lastDayBalance.setBalanceDirection(Subject.DIR_DEBIT);//日记账的余额方向都在借方
			Double startBalance = 0D;//期初余额，供后续计算使用
			//String startBalHql = " select b from AccountBalance b where b.subjectCode =?1 and b.accountPeriod = ?2 ";
			AccountBalance startAccBal = accountBalanceServiceImpl.uniqueResult(LangUtils.toMap("accountPeriod", period, "subjectCode", code));//父级科目余额
			startBalance = BigDecimalUtils.subtract(startAccBal.getStartBalanceDebit(), startAccBal.getStartBalanceCredit());
			//该科目当天以前的本期发生额
			/*String curHql = " select sum(c.debitAmount),sum(c.creditAmount) from Certificate c where c.subjectId = ?1 and c.createTime < ?2 and c.accountPeriod = ?3 ";
			List<Object[]> curHqlList = certificateServiceImpl.hqlQueryForObject(curHql, false, code, ObjectUtils.toDateString("yyyy-MM-dd"),period);
			Object[] curBal = curHqlList.get(0);
			Double debitAmount = (Double)curBal[0];
			Double creditAmount = (Double)curBal[1];
			startBalance = BigDecimalUtils.add(startBalance, BigDecimalUtils.subtract(debitAmount, creditAmount));*/
			//lastDayBalance.setBalance(startBalance);//上日余额
			//dailyAccountDaoImpl.persist(lastDayBalance);
			
			//DateTime dateTime = JodaTimeUtils.firstDayOfMonth(new Date());
			
			StringBuilder dailyHql = new StringBuilder("select new DailyAccount");
			dailyHql.append(" (t.codeNo,t.createDate,c.subjectId,c.subjectName,c.accountPeriod,c.summary,c.debitAmount,c.creditAmount) ");
			dailyHql.append(" from CertTotal t join t.childCerts c ");
			dailyHql.append(" where c.parentCert in ( ");
			dailyHql.append(" select cc.parentCert from Certificate cc where cc.subjectId = ?1) ");
			dailyHql.append(" and c.subjectId != ?2 ");
			dailyHql.append(" order by c.createTime asc,isnull(t.codeNo),t.codeNo asc ");
			List<DailyAccount> dailyList = dailyAccountDaoImpl.getListByHql(dailyHql.toString(), code, code);
			
			if (dailyList != null && dailyList.size() > 0) {
				Date tempDate = new Date();//用来判断两条记录是否是同一天的
				Double debitSum = 0D;
				Double creditSum = 0D;
				Integer orders = 1;
				for (int i =0; i< dailyList.size(); i++) {
					DailyAccount bean = dailyList.get(i);
					if (i == 0) {
						tempDate = bean.getCreateDate();
					} else {//上一条记录的时间
						tempDate = dailyList.get(i - 1).getCreateDate();
					}
					if (tempDate.equals(bean.getCreateDate())) {//和上一条记录是同一天
						debitSum = BigDecimalUtils.add(bean.getDebit(), debitSum);
						creditSum = BigDecimalUtils.add(bean.getCredit(), creditSum);
						
						Double balance = BigDecimalUtils.subtract(bean.getDebit(), bean.getCredit());//借-贷
						balance = BigDecimalUtils.add(startBalance, balance);//期初+余额
						startBalance = balance;//将余额赋值给期初，供下次使用
						bean.setBalance(balance);
						bean.setBalanceDirection(Subject.DIR_DEBIT);
						bean.setType(code);
						bean.setOrders(orders++);
						dailyAccountDaoImpl.persist(bean);
						
						if ((i + 1) == dailyList.size()) {//是最后一条记录，统计 本日合计
							DailyAccount thisDaySum = new DailyAccount();
							thisDaySum.setSummary("本日合计");
							thisDaySum.setBalance(startBalance);
							thisDaySum.setBalanceDirection(Subject.DIR_DEBIT);
							thisDaySum.setCreateDate(tempDate);
							thisDaySum.setDebit(debitSum);
							thisDaySum.setCredit(creditSum);
							thisDaySum.setAccountPeriod(period);
							thisDaySum.setType(code);
							thisDaySum.setOrders(orders++);
							dailyAccountDaoImpl.persist(thisDaySum);
						}
					} else {//和上一条记录不是同一天
						
						//统计上一天的本日合计
						DailyAccount lastDaySum = new DailyAccount();
						lastDaySum.setSummary("本日合计");
						lastDaySum.setBalance(startBalance);
						lastDaySum.setBalanceDirection(Subject.DIR_DEBIT);
						lastDaySum.setCreateDate(tempDate);
						lastDaySum.setDebit(debitSum);
						lastDaySum.setCredit(creditSum);
						lastDaySum.setAccountPeriod(period);
						lastDaySum.setType(code);
						lastDaySum.setOrders(orders++);
						dailyAccountDaoImpl.persist(lastDaySum);
						
						//保存该条
						debitSum = 0D;//下一条记录了，重置
						creditSum = 0D;
						debitSum = BigDecimalUtils.add(bean.getDebit(), debitSum);
						creditSum = BigDecimalUtils.add(bean.getCredit(), creditSum);
						
						Double balance = BigDecimalUtils.subtract(bean.getDebit(), bean.getCredit());//借-贷
						balance = BigDecimalUtils.add(startBalance, balance);//期初+余额
						startBalance = balance;//将余额赋值给期初，供下次使用
						bean.setBalance(balance);
						bean.setBalanceDirection(Subject.DIR_DEBIT);
						bean.setType(code);
						bean.setOrders(orders++);
						dailyAccountDaoImpl.persist(bean);
						
						if ((i + 1) == dailyList.size()) {//是最后一条记录，统计 本日合计
							DailyAccount thisDaySum = new DailyAccount();
							thisDaySum.setSummary("本日合计");
							thisDaySum.setBalance(startBalance);
							thisDaySum.setBalanceDirection(Subject.DIR_DEBIT);
							thisDaySum.setCreateDate(tempDate);
							thisDaySum.setDebit(debitSum);
							thisDaySum.setCredit(creditSum);
							thisDaySum.setAccountPeriod(period);
							thisDaySum.setType(code);
							thisDaySum.setOrders(orders++);
							dailyAccountDaoImpl.persist(thisDaySum);
						}
					}
				}
			}
			
			//1、上日余额
			//2、按天计算，然后合计
			//3、本期合计
			//4、本年累计
			
			//其中1,3,4与所查询的科目和时间区间有关系，是动态变化的，
			//所有就不生成数据了，每次动态产生
		}
	}

	@Override
	@Inject
	public void setBaseGenericDaoImpl(
			BaseGenericDao<DailyAccount, String> dailyAccountDaoImpl) {
		this.baseGenericDaoImpl = dailyAccountDaoImpl;
		this.dailyAccountDaoImpl = (IDailyAccountDao) dailyAccountDaoImpl;
	}
	
	@Inject
	public void setAccountBalanceServiceImpl(
			IAccountBalanceService accountBalanceServiceImpl) {
		this.accountBalanceServiceImpl = accountBalanceServiceImpl;
	}

}
